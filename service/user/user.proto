syntax = "proto3";

package user;

option go_package = "./user";

message Resp {
  int32 status_code = 1;
  string status_msg = 2;
}

message userReq {
  int64 user_id = 1;
  int64 target_id = 2;
}

message userResp {
  Resp resp = 1;
//  string name = 2;
  optional int64 follow_count = 3;
  optional int64 follower_count = 4;
  bool is_follow = 5;
//  optional string avatar = 6; //用户头像
//  optional string background_image = 7; //用户个人页顶部大图
//  optional string signature = 8; //个人简介

//  optional int64 total_favorited = 9; //获赞数量
//  optional int64 work_count = 10; //作品数量
//  optional int64 favorite_count = 11; //点赞数量
}

message relationActReq{
  int64 user_id = 1;
  int64 target_id = 2;
  int32 action = 3;
}
message relationActResp{
  bool success = 1;
}

message followListReq{
  int64 user_id = 1;
}
message followListResp{
  repeated int64 user_ids = 1;
}

message followerListReq{
  int64 user_id = 1;
}
message followerListResp{
  repeated int64 user_ids = 1;
}

message friendListReq {
  int64 user_id = 1;
}
message friendListResp {
  Resp resp = 1;
  repeated int64 user_id_list = 2;
}

message isFriendReq {
  int64 user_id = 1;
  int64 target_id = 2;
}
message isFriendResp {
  bool is_friend = 2;
}

service user {
  rpc user(userReq) returns (userResp);
  rpc relationAct(relationActReq) returns (relationActResp);
  rpc followList(followListReq) returns (followListResp);
  rpc followerList(followerListReq) returns (followerListResp);
  rpc friendList(friendListReq) returns (friendListResp);
  rpc isFriend(isFriendReq) returns (isFriendResp);
}