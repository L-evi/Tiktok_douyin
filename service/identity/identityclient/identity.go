// Code generated by goctl. DO NOT EDIT.
// Source: identity.proto

package identityclient

import (
	"context"

	"train-tiktok/service/identity/types/identity"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserInfoReq  = identity.GetUserInfoReq
	GetUserInfoResp = identity.GetUserInfoResp
	LoginReq        = identity.LoginReq
	LoginResp       = identity.LoginResp
	RegisterReq     = identity.RegisterReq
	RegisterResp    = identity.RegisterResp
	Resp            = identity.Resp
	StatusReq       = identity.StatusReq
	StatusResp      = identity.StatusResp

	Identity interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	}

	defaultIdentity struct {
		cli zrpc.Client
	}
)

func NewIdentity(cli zrpc.Client) Identity {
	return &defaultIdentity{
		cli: cli,
	}
}

func (m *defaultIdentity) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultIdentity) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultIdentity) Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.Status(ctx, in, opts...)
}

func (m *defaultIdentity) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := identity.NewIdentityClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}
